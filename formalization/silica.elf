%{
This is part of a proof of soundness of Silica, the formal core of Obsidian.
Copyright (c) 2018 Michael Coblenz.
}%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Abstract syntax
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%% Types %%%%%%%%%%%%%%%%%
typ: type.


contractName : type. %name contractName C c.
stateName : type. %name stateName S s.

contractName_nat : nat -> contractName.
stateName_nat : nat -> stateName.

% http://twelf.org/wiki/Lists
% Indexing these by length, per FJ, but it's not clear to me whether I need that.
stateNameList : nat -> type. %name stateNameList SL sl.
stateNameList_nil: stateNameList z.
stateNameList_cons: stateName -> stateNameList N -> stateNameList (s N).
%freeze stateNameList.


tST : type.
tST_owned : tST.
tST_unowned : tST.
tST_shared : tST.
tST_stateList : stateNameList N -> tST.

tC : contractName -> tST -> typ.
boolean: typ.
Void: typ.


%%%%%%%%%%%%%%% Programs %%%%%%%%%%%%%%%%%
% In this formalism, fields are not named. They are identified only by index in their containing contract or state.
field : type.
field_typ : typ -> field.

fieldList : nat -> type.
fieldList_nil: fieldList z.
fieldList_cons : field -> fieldList N -> fieldList (s N).

state : type.
stateExp : stateName -> fieldList N -> type.

stateList: nat -> type.
stateList_nil : stateList z.
stateList_cons : state -> stateList N -> stateList (s N).

stateConstraint : type.
stateConstraint_contract : contractName -> stateConstraint.
stateConstraint_transition: contractName -> tST -> stateConstraint.
stateConstraint_base : stateConstraint. % e.g. boolean

stateConstraintList : nat -> type.
stateConstraintList_nil : stateConstraintList z.
stateConstraintList_cons : stateConstraint -> stateConstraintList N -> stateConstraintList (s N).

simpleExpression : type.

methodName: type.
methodNameExp: nat -> methodName. % Methods are indexed by their index within their contracts.

expr : type. %name expr E x.
% Represent variables with LF variables; no variable constructor is needed.
let : typ -> expr -> (expr -> expr) -> expr.
true : expr.
false : expr.
void : expr.
% For now, only one argument at a time.
invoke : simpleExpression -> methodName -> simpleExpression -> expr.
assert : simpleExpression -> stateConstraintList N -> expr.

method : type.
methodDef : typ -> stateConstraintList N -> tST -> tST -> expr -> method.

methodList : nat -> type.
methodList_nil : methodList z.
methodList_const : method -> methodList N -> methodList (s N).

contract : type.
assetContract : contractName -> stateList N -> fieldList M -> methodList P -> contract.
nonAssetContract: contractName -> stateList N -> fieldList M -> methodList P -> contract.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Static semantics
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

var-of : expr -> 

of : expr -> typ -> type.

% Deferring this until I know more about what I'm doing.
 of/let : of (let T E1 E2) T2
	  <- of E1 T
	  <- subtype T T1
	  <- ({x} var-of x T1
		-> of (E2 x) T2) % TODO: get output context

of/true : of true boolean.
of/false : of false boolean.
of/void : of void Void.
% TODO
% of/invoke : 

% of/assert : of (assert s S') Void
%	     <- 
