import "resources/case_studies/Insurance/PolicyRecord.obs"

contract ActiveNodeMaybe {

    ActiveNodeMaybe@Some(ActivePolicyNode@Shared node) {
        ->Some(node = node);
    }

    ActiveNodeMaybe@None() {
        ->None;
    }

    state Some {
        ActivePolicyNode@Shared node;
    }

    transaction getNode(ActiveNodeMaybe@Some this) returns ActivePolicyNode@Shared {
        return node;
    }

    transaction getValue(ActiveNodeMaybe@Some this) returns PolicyRecord@Unowned {
        return node.getValue();
    }

    state None {}
}

resource contract ActivePolicyNode {
    PolicyRecord@Active elem;
    ActiveNodeMaybe@Owned next;

    ActivePolicyNode@Owned(PolicyRecord@Active >> Unowned elem, ActiveNodeMaybe@Owned next) {
        this.elem = elem;
        this.next = next;
    }

    transaction setNext(ActiveNodeMaybe@Owned >> Unowned newNext) {
        next = newNext;
    }

    transaction getValue() returns PolicyRecord@Unowned {
        PolicyRecord@Active elemCopy = elem;
        elem = elemCopy;
        return elemCopy;
    }

    transaction getValueOwned() returns PolicyRecord@Active {
        PolicyRecord@Active elemCopy = elem;
        elem = new PolicyRecord(elem.getPolicy(), new Money(0));
        elem.activate(new Money(0));
        return elemCopy;
    }

    transaction length() returns int {
        int i = 1;
        switch next {
            case Some {
                i = i + next.getNode().length();
            }
        }
        return i;
    }

    transaction nth(int n) returns ActiveNodeMaybe@Owned {
        if (n == 0) {
            return new ActiveNodeMaybe(this);
        }

        ActiveNodeMaybe@Owned ret;
        switch next {
            case Some {
                ret = next.getNode().nth(n - 1);
            }
            case None {
                ret = new ActiveNodeMaybe();
            }
        }

        return ret;
    }

    transaction append(PolicyRecord@Active >> Unowned new_elem) {
        switch next {
            case Some {
                next.getNode().append(new_elem);
            }
            case None {
                next = new ActiveNodeMaybe(new ActivePolicyNode(new_elem, new ActiveNodeMaybe()));
            }
        }
    }

    // remove policy record that has the given policy
    transaction remove(Policy policy, ActivePolicyNode@Shared prevNode) returns PolicyRecord@Active {
        PolicyRecord@Active removed;

        if (elem.equals(policy)) {
            prevNode.setNext(next);
            removed = getValueOwned();
        } else {
            switch next {
                case Some {
                    removed = next.getNode().remove(policy, this);
                }

                case None {
                    throw; // TODO : element not in list?
                }
            }

        }

        return removed;

    }

    transaction equals(Policy policy) returns bool {
        return elem.equals(policy);
    }

}

main contract ActivePolicyList {

    ActiveNodeMaybe@Owned first;

    ActivePolicyList@Shared() {
        first = new ActiveNodeMaybe();
    }

    transaction length() returns int {
        int i = 0;
        switch first {
            case Some {
                i = first.getNode().length();
            }
        }
        return i;
    }

    transaction nth(int n) returns ActiveNodeMaybe {
        ActiveNodeMaybe@Owned node;
        switch first {
            case Some {
                node = first.getNode().nth(n);
            }
            case None {
                node = new ActiveNodeMaybe();
            }
        }
        return node;
    }

    transaction append(PolicyRecord@Active >> Unowned elem) {
        switch first {
            case Some {
                first.getNode().append(elem);
            }
            case None {
                first = new ActiveNodeMaybe(new ActivePolicyNode(elem, new ActiveNodeMaybe()));
            }
        }
    }

    // remove and return the policy record that has the given policy
    transaction remove(Policy policy) returns PolicyRecord@Active {
        PolicyRecord@Active removed;

        switch first {
            case Some {
                ActivePolicyNode@Shared node = first.getNode();

                if(node.equals(policy)) {
                    first = new ActiveNodeMaybe();
                    removed = node.getValueOwned();
                } else {
                    removed = node.remove(policy, node);
                }
            }
            case None {
                throw; //TODO : element not in list?
            }
        }

        return removed;

    }

}
