import "resources/case_studies/Insurance/Insurer.obs"
import "resources/case_studies/Insurance/PolicyRecord.obs"
import "resources/case_studies/Insurance/PendingPolicyList.obs"
import "resources/case_studies/Insurance/ActivePolicyList.obs"


main resource contract InsuranceService {
    // TODO: Collection of Insurer
    // TODO: Keys of trusted banks
    Insurer@Shared insurers;
    TimeService@Shared timeService;

    // pending and active policies
    PendingPolicyList@Shared pendingPolicies;
    ActivePolicyList@Shared activePolicies;

    // for now have to have a reference to bank
    Bank@Shared bank;

    InsuranceService@Owned() {
        pendingPolicies = new PendingPolicyList();
        activePolicies = new ActivePolicyList();
    }

    transaction addInsurer(Insurer@Shared insurer) {
        insurers = insurer;
    }

    // TODO: information to calculate bids, Collection of Bid and Token
    transaction requestBids(int i) returns Policy@Offered {
        InsuranceBid@Owned insBid = insurers.requestBid(i);

        int cost = insBid.getCost();
        int expiration = insBid.getExpirationTime();
        Money@Owned payout = insBid.getPayout();

        Policy@Offered policy = new Policy(cost, expiration);
        Policy@Offered policyCopy = policy;
        PolicyRecord@Pending pendingPolicy = new PolicyRecord(policy, payout);

        pendingPolicies.append(pendingPolicy);

        return policyCopy;
    }

    transaction buyPolicy(Policy@Offered >> (Active | Expired) policy, Money@Owned >> Unowned money) returns Money@Owned {
        // make an unowned copy
        Policy@Offered policyCopy = policy;
        policy = policyCopy;

        if (timeService.getTime() > policy.getExpirationTime()) {
            PolicyRecord@Pending pendingPolicy = pendingPolicies.remove(policyCopy);
            // refund insurer's payout
            Money@Owned insurerRefund = pendingPolicy.refund();
            insurers.receiveRefund(insurerRefund);

            // expire policy and return money
            disown pendingPolicy;
            policy.expire();
            return money;
        } else {
            PolicyRecord@Pending pendingPolicy = pendingPolicies.remove(policyCopy);
            // get payment
            int cost = policy.getCost();
            Money@Owned payment = money.getAmountOfMoney(cost);

            // activate policy record with payment
            pendingPolicy.activate(payment);
            activePolicies.append(pendingPolicy);

            // activate policy and return any change
            policy.activate();
            return money;
        }

    }

}


