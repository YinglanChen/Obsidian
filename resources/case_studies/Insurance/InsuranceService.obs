import "resources/case_studies/Insurance/Insurer.obs"
import "resources/case_studies/Insurance/PolicyRecord.obs"
import "resources/case_studies/Insurance/PendingPolicyMap.obs"
import "resources/case_studies/Insurance/ActivePolicyMap.obs"


main asset contract InsuranceService {
    // TODO: Collection of Insurer
    // TODO: Keys of trusted banks
    Insurer@Shared insurers;
    TimeService@Shared timeService;

    // pending and active policies
    PendingPolicyMap@Owned pendingPolicies;
    ActivePolicyMap@Owned activePolicies;

    // for now have to have a reference to bank
    Bank@Shared bank;

    InsuranceService@Owned() {
        pendingPolicies = new PendingPolicyMap();
        activePolicies = new ActivePolicyMap();
    }

    transaction addInsurer(Insurer@Shared insurer) {
        insurers = insurer;
    }

    // TODO: information to calculate bids, Collection of Bid and Token
    transaction requestBids(int i) returns Policy@Offered {
        InsuranceBid insBid = insurers.requestBid(i);

        int cost = insBid.getCost();
        int expiration = insBid.getExpirationTime();
        Money payout = insBid.getPayout();

        Policy policy = new Policy(cost, expiration);
        PolicyRecord pendingPolicy = new PolicyRecord(policy, payout);

        pendingPolicies.set(policy, pendingPolicy);

        return policy;
    }

    transaction buyPolicy(Policy@Offered >> (Active | Expired) policy, Money@Owned >> Unowned money) returns Money@Owned {

        if (timeService.getTime() > policy.getExpirationTime()) {
            PolicyRecord pendingPolicy = pendingPolicies.get(policy);

            // refund insurer's payout
            Money insurerRefund = pendingPolicy.refund();
            insurers.receiveRefund(insurerRefund);

            // expire policy and return money
            disown pendingPolicy;
            policy.expire();
            return money;
        } else {
            PolicyRecord pendingPolicy = pendingPolicies.get(policy);
            // get payment
            int cost = policy.getCost();
            Money payment = money.getAmountOfMoney(cost);

            // activate policy record with payment
            pendingPolicy.activate(payment);
            activePolicies.set(policy, pendingPolicy);

            // activate policy and return any change
            policy.activate();
            return money;
        }

    }

}


