import "resources/case_studies/Insurance/Insurer.obs"
import "resources/case_studies/Insurance/ResultBid.obs"

main resource contract InsuranceService {
    // TODO: Collection of Insurer, Token
    // TODO: Keys of trusted banks
    Insurer@Shared insurer;
    Token@Owned tokens;
    TimeService@Shared timeService;

    InsuranceService@Owned() {}

    transaction addInsurer(Insurer@Shared ins) {
        insurer = ins;
    }

    transaction addTimeService(TimeService@Shared ts) {
        timeService = ts;
    }

    // TODO: information to calculate bids, Collection of Bid and Token
    transaction requestBids(int i) returns Bid@Unpurchased {
        BidTokenPair@Shared bidAndTokens = insurer.requestBids(i);

        // TODO: add Tokens from bidAndTokens to the collection of tokens
        // TODO: how to keep track of tokens for each client?
        tokens = bidAndTokens.getToken();
        Bid@Unpurchased bid = bidAndTokens.getBid();

        return bid;
    }

    transaction buyBid(ResultBid@Unpurchased >> (Purchased | Err) result, Token@Owned token) {
        Bid@Unpurchased unpurchasedBid = result.getUnpurchasedBid();

        if (timeService.getTime() > unpurchasedBid.getExpirationTime()) {
            result.toErr("Bid expired.");
        } else {
            //TODO: drain token?
            result.buy();
        }
    }

}


