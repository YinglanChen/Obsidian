import "resources/case_studies/Insurance/TimeService.obs"

main resource contract Bid {
    int cost;
    TimeService@Shared timeService;


    // available for consideration from client
    state Available {
        int expirationTime;
    }

    // expires after a certain amount of time
    state Expired {}

    // client buys it
    state Sold {}

    Bid@Available(int c, int expiration, TimeService@Shared ts) {
        cost = c;
        // Available by default
        timeService = ts;
        ->Available(expirationTime = expiration);
    }

    // TODO: Proper timing
    transaction hasExpired(Bid@Available this) returns bool {
        return expirationTime < timeService.getTime();
    }

    transaction expire(Bid@Available >> Expired this) {
        ->Expired;
    }

    transaction buy(Bid@Available >> Sold this) {
        ->Sold;
    }

    transaction getCost(Bid this) returns int {
        return cost;
    }

}