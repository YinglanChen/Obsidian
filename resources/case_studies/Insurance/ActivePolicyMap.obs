import "resources/case_studies/Insurance/PolicyRecord.obs"

// This implements a mutable linked list of Active policies.
asset contract ActivePolicyList {
    state HasNext {
        Policy@Unowned key;
        PolicyRecord@Active val;
        ActivePolicyList@Owned next;
    }

    state Empty {
    }

    ActivePolicyList@Empty() {
        ->Empty;
    }

    // returns old next node
    private transaction setNext(ActivePolicyList@HasNext this, ActivePolicyList@Owned >> Unowned newNext) returns ActivePolicyList@Owned {
        ActivePolicyList oldNext = next;
        next = newNext;
        return oldNext;
    }

    transaction getKey(ActivePolicyList@HasNext this) returns Policy@Unowned {
        return key;
    }

    transaction getValue(ActivePolicyList@HasNext this) returns PolicyRecord@Unowned {
        return val;
    }

    private transaction removeValue(ActivePolicyList@HasNext >> Empty this) returns PolicyRecord@Active {
        PolicyRecord valCopy = val;
        disown next;
        ->Empty;
        return valCopy;
    }


    transaction append(ActivePolicyList@Owned this, Policy@Unowned k, PolicyRecord@Active >> Unowned v) {
        switch this {
            case HasNext {
                next.append(k, v);
            }
            case Empty {
                ->HasNext(key = k, val = v, next = new ActivePolicyList());
            }
        }
    }

    // get and remove the pair with the given Policy as a key
    transaction remove(ActivePolicyList@Unowned this, Policy@Unowned policy, ActivePolicyList@HasNext prevNode) returns PolicyRecord@Active {
        PolicyRecord removed;
        switch this {
            case Empty {
                throw; // TODO : element not in map?
            }
            case HasNext {

                if (next.key.equals(policy)) {
                    ActivePolicyList oldNext = setNext(next);
                    removed = ownedThis.
                    //removed = removeValue();
                }
                else {
                    removed = next.remove(policy, this);
                }
            }
        }

        return removed;
    }
}


main asset contract ActivePolicyMap {
    ActivePolicyList@Owned list;

    ActivePolicyMap@Owned() {
        list = new ActivePolicyList(); // Start with an empty list.
    }

    transaction set(ActivePolicyMap@Owned this, Policy@Unowned key, PolicyRecord@Active >> Unowned val) {
        list.append(key, val);
    }

    // remove and return value of the pair with the given policy as a key
    transaction extract(ActivePolicyMap@Owned this, Policy@Unowned policy) returns PolicyRecord@Active {
        PolicyRecord removed;

        switch list {
            case HasNext {
                if(list.getKey().equals(policy)) {
                    ActivePolicyList oldList = list;
                    [oldList@Owned];
                    removed = oldList.removeValue();
                    list = new ActivePolicyList();
                } else {
                    removed = list.remove(policy, list);
                }
            }
            case Empty {
                throw; //TODO : element not in map?
            }
        }

        return removed;

    }

}


