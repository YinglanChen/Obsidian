/* This test checks various aspects of type-checking related to branching that
 * is, if/else statements */

contract StructuralContract {
}

asset contract LinearContract {

}

contract StatefulContract {
    state S1;
    state S2;

    StatefulContract@S1() {
        ->S1;
    }

    transaction toS2(StatefulContract@S1 >> S2 this) {
        ->S2;
    }
}

main contract C {
    transaction t() {
        LinearContract o1 = new LinearContract();
        StructuralContract s1 = new StructuralContract();
        // [o1] is incompatible after the branch because it's used in only one
        if (true) {
            LinearContract o2 = o1;
            StructuralContract s2 = s1;
        } else {
            int x = 5;
        }
    }

    transaction t2() {
        LinearContract o1 = new LinearContract();
        // shouldn't cause a merge incompatibility because of the exception
        if (true) {
            LinearContract o2 = o1;
        } else {
            revert;
        }
    }

    transaction t3() {
        LinearContract o1 = new LinearContract();
        if (true) {
            LinearContract o2 = o1;
        }
    }

    transaction t4() {
        // x must be undefined after the branch
        if (true) {
            int x = 5;
        } else {
            int x = 2;
        }
        x = 3;
    }

    transaction t5() returns int {
        if (true) {
            return 5;
        } else {
            revert;
        }
    }

    transaction t6() {
        StatefulContract s1 = new StatefulContract();
        if (true) {
            s1.toS2();
        }
        [s1@(S1|S2)];
    }

    transaction t7() {
        StatefulContract s1 = new StatefulContract();
        if (true) {
            disown s1;
        }
        [s1@Unowned];
    }

    transaction t7() {
        StatefulContract s1 = new StatefulContract();
        if (true) {
        }
        else {
            disown s1;
        }
        [s1@Unowned];
    }

    transaction t8() {
        StructuralContract s1 = new StructuralContract();
        [s1 @ Owned];
        if (true) {
            HoldReference h = new HoldReference(s1);
            [s1 @ Unowned];
        }
        else {
            disown s1;
            [s1 @ Shared];
        }
        [s1 @ Unowned];
    }

}

contract HoldReference {
    StructuralContract@Owned ref;

    HoldReference@Owned(StructuralContract@Owned >> Unowned s) {
        ref = s;
    }
}

contract StatesWithFields {
    state S1;
    state S2 {
        StatesWithFields@S1 x;
    }

    StatesWithFields@S1() {
        ->S1;
    }

    transaction t(StatesWithFields@Shared this) {
        if (this in S2) {
            x = new StatesWithFields();
        }
    }
}