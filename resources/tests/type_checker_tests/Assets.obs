// This file tests ownership transfer and linearity.

main asset contract BogusMoney {
	 // Error: constructor must return an owned reference
	 BogusMoney@Shared() {
	 }
}

asset contract Money {
    Money@Owned() {

    }
}

asset contract Wallet {
    Money@Owned money;

    Wallet@Owned(Money@Owned >> Unowned m) {
        money = m;
    }

    transaction loseMoney (Money@Owned m) {
        // OK: m's ownership is returned to the caller
    }

    transaction stealMoney (Money@Unowned m) {
        money = m;
        // Error: type of money is inconsistent with declaration.
    }

    transaction returnMoney (Money@Owned >> Unowned m) returns Money@Owned {
    	return m;
    }

    transaction failToReturnMoney (Money@Unowned m) returns Money@Owned {
        // Error: can't return unowned m when owned Money is required
        return m;
    }
}

contract BadWallet {
    // Error: can't own a asset in a non-asset contract.
    Money@Owned money;
}

contract Disowning {
	 transaction bogusDiscardMoney (Money@Unowned m) {
	 	 // Error: m is unowned
	 	 disown m;
	 }

	 transaction discardMoney (Money@Owned >> Unowned m) {
        disown m;

     	// Error: m is shared.
     	discardMoney(m);
     }

     transaction getMoney() returns Money@Owned {
        return new Money();
     }

     transaction discardMoneyCall () {
        disown getMoney();
        Money m = disown getMoney(); // disown is an expression, not just a statement
     }
}

contract LosingResource {
    transaction bogus (Money@Owned >> Unowned m) returns Money@Unowned {
        // Error: losing m.
        return m;
    }
}