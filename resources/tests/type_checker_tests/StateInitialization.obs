main contract Test {
    state S1 {
        int x1;
        int x2;
    }

    state S2 {
        int x3;
    }

    state S3 {}

    int shared available in S1, S2;

    Test@S1() {
    	S1::x1 = 42;
        S1::x2 = 43;
        S1::shared = 44;

        // Error: not transitioning to S2.
        S2::x3 = 45;

        ->S1;
        ->S3;
        ->S1; // Error: previous initializers are no longer in scope, so there are uninitialized fields now.

        // Error: not transitioning to S1.
        S1::x1 = 45;
        shared = 2;
    }

    transaction t1(Test@S1 this) {
        if (true) {
            S1::x1 = 43; // Error: can't assign to x1 without transitioning to state S1.
        }
    }
}

asset contract Money {}
main asset contract Wallet {
    state S1 {
        Money @ Owned m;
    }

    Wallet@Owned() {
        S1::m = new Money();
        S1::m = new Money(); // Error: overwriting owned field
        m = new Money();
        ->S1; // Error: line 8 overwrote line 10
    }

    transaction t(Wallet@S1 this) {
        disown m;
        S1::m = new Money();
        ->S1(m = new Money()); // Error: double initialization
    }
}
