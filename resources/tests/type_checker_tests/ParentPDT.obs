// checks path-dependent types involving "parent"

contract C {
    contract T {
        this.parent.T f;
        C x;
        transaction t(T arg) {
            T a = this;
            this.parent.T b = arg;
            this.parent.T c = this;
            parent.T d = arg;
            parent.T e = this;
            C f = parent;
        }
    }
}

main contract UsesC {
    transaction t() {
        readonly UsesC a = this;
        // should fail: no parent for UsesC
        UsesC b = parent;
    }
}