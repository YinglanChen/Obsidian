
/*
The following program simulates an English auction; there are multiple Bidders 
who each make a Bid for a single Item being sold by a Seller.
The highest Bidder will receive the Item for the price of the highest Bid.
*/





/*
Below is the Bid contract, which represents a single bid in our Auction. 
Please answer the questions below.


TODO: What state is a Bid in at:
    1. First instantiation? ______________________
    2. The beginning of the bidSurpassed transaction? _____________________
    3. The end of the bidSurpassed transaction? ________________________
*/

asset contract Bid {
    Money@Owned money;

    state Open;
    state Stale;

    Bid@Open(int num) {
        money = new Money(num);
        ->Open;
    }

    transaction getAmount(Bid@Owned this) returns int {
        return money.getAmount();
    }

    transaction bidSurpassed(Bid@Open >> Stale this) {
        -> Stale;
    }
}


/*
Below is the Bidder contract, which represents a bidder in our Auction.
Answer all the TODO statements below.
*/

asset contract Bidder {
    string name; //Bidder's name
    Money@Owned money; //The total Money owned by the Bidder
    ItemList@Owned inventory; // storage place for items -- can add infinite items to inventory

    Bidder@Owned(string n, int m) {
        name = n;
        money = new Money(m);
        inventory = new ItemList();
    }

    transaction createBid(Bidder@Owned this, int bidAmount) returns Bid@Owned {
        money.setAmount(money.getAmount() - bidAmount);
        //4. TODO: Finish this transaction by creating a new bid with the given bidAmount.
    }

    transaction getName(Bidder@Unowned this) returns string {
        return name;
    }

    transaction won(Bidder@Unowned this, Item@Owned >> Unowned i) {
        inventory.append(i);
    }

    transaction receiveBidMoney(Bidder@Unowned this, Bid@Owned >> Unowned bid) {
        money.setAmount(money.getAmount() + bid.getAmount());
        disown bid;
    }
}

/*
Below are the Seller, Item, ItemList, and Money contracts. Refer to these (as well as the Bid and Bidder contracts above) to complete
the rest of the Auction exercise.
*/

asset contract Seller {
    Item@Owned item;
    state SoldItem {
        Bid@Owned bid;
    }
    state Unsold;

    Seller@Unsold() {
        item = new Item();
        -> Unsold;
    }

    transaction receiveBid(Seller@Unsold >> SoldItem this, Bid@Owned >> Unowned b) {
        -> SoldItem(bid = b);
    }
}

contract Item {

}

contract ItemList {
    state Empty;
    state HasItems {
        Item@Owned item;
        ItemList@Owned next;
    }

    ItemList@Empty() {
        ->Empty;
    }

    transaction append(ItemList@Owned this, Item@Owned >> Unowned it) {
        ItemList ilist = new ItemList();
        -> HasItems(item = it, next = ilist);
    }
}

asset contract Money {
    int amount;

    Money@Owned(int num) {
        amount = num;
    }

    transaction getAmount(Money@Owned this) returns int {
        return amount;
    }

    transaction setAmount(Money@Owned this, int num) {
        amount = amount - num;
    }
}

/*
In the Auction contract below, do all the TODO statements.
*/

main asset contract Auction {

    Bidder@Unowned maxBidder;
    Seller@Unsold seller;
    Item@Owned item available in Open, BiddingDone;

    state Open {
        Bid@Owned bid;
    }
    state BiddingDone {
        Bid@Owned finalBid;
    }
    
    state Closed;


    Auction@Owned(Item@Owned >> Unowned i) {
        maxBidder = new Bidder("none", 0);
        seller = new Seller();
        -> Open(item = i, bid = new Bid(-1));
    }

    transaction makeBid(Auction@Open this, Bid@Owned >> Unowned newBid, Bidder@Unowned bidder) {
        //if the new bid is higher than the old highest bid
        if (newBid.getAmount() > bid.getAmount()) {
            setCurrentBid(newBid);  //You will write this transaction below
            Bidder tempBidder = maxBidder;
            maxBidder = bidder;
        }
        //if the bid is not higher than the old one
        else {
            //5. TODO: return the new bid money to the bidder. Refer to the above contracts as needed.

        }
    }

    transaction setCurrentBid(Auction@Open this, Bid@Owned >> Unowned b) {
        //6. TODO: set the current bid to the new bid b. You may call any other transactions as needed.

    }

    transaction returnBidMoney(Auction@Open this, Bid@Owned >> Unowned b, Bidder@Unowned bidder) {
        bidder.receiveBidMoney(b);
    }

    transaction finishBidding(Auction@Open >> BiddingDone this) {
        -> BiddingDone(item = item, finalBid = bid);
    }

    /* 7. TODO: Assuming this transaction should be called after the "finishBidding" transaction,
                finish the transaction declaration below. */
    transaction giveItem(/* Fill this in */ this) {
        maxBidder.won(item);
        seller.receiveBid(finalBid);
        -> Closed;
    }
}