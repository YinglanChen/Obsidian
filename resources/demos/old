contract Player {
    state ToChoose;
    state Rock;
    state Paper;
    state Scissors;

    Player() {
        ->ToChoose;
    }

    transaction rock(Player@ToChoose >> Rock this) {
        ->Rock;
    }

    transaction paper(Player@ToChoose >> Paper this) {
        ->Paper;
    }

    transaction scissors(Player@ToChoose >> Scissors this) {
        ->Scissors;
    }
}

main contract RockPaperScissors {
    state PlayerOneChoice;
    state PlayerTwoChoice;
    state BothChosen;
    state PlayerOneWin;
    state PlayerTwoWin;

    Player@Owned playerOne;

    RockPaperScissors() {
        playerOne = new Player();
        ->PlayerOneChoice;
    }

    transaction playerOneChoose(string choice) {
        if (playerOne in ToChoose) {
            if (choice == "rock") {
                playerOne.rock();
            } else {
                if (choice == "paper") {
                    playerOne.paper();
                } else {
                    if (choice == "scissors") {
                        playerOne.scissors();
                    } else {
                        revert "Choice must be one of: rock, paper, scissors";
                    }
                }
            }
        }
    }

    transaction playerOneState() returns string {
        if (playerOne in ToChoose) {
            return "ToChoose";
        }
        if (playerOne in Rock) {
            return "rock";
        }
        if (playerOne in Paper) {
            return "paper";
        }
        if (playerOne in Scissors) {
            return "scissors";
        } else {
            return "blah";
        }
    }
}

