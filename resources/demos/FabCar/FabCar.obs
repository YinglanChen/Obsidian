import "Comparator.obs"
import "Integer.obs"
import "Dict.obs"

contract CarComparator implements Comparator[Car] {
  transaction equals(Car@Unowned a, Car@Unowned b) returns bool {
    return a.getColor() == b.getColor() 
        && a.getMake() == b.getMake()
        && a.getModel() == b.getModel()
        && a.getOwner() == b.getOwner(); 
  }
}

contract CarListPrinter implements Iterator[Integer, Car] {
  string text;

  CarListPrinter@Owned() {
    text = "{";
  }

  transaction performAction(Integer key, Car val, bool last) {
    if (last) {
      text = text + val.toString();
    }
    else {
      text = text + val.toString() + ",";
    }
  }

  transaction finalize() returns string {
    text = text + "}";
    
    return text;
  }

  transaction getText() returns string {
    return text;
  }
}

contract Car {
  string color;
  string make;
  string model;
  string owner;

  Car@Owned(string color, string make, string model, string owner) {
    this.color = color;
    this.make = make;
    this.model = model;
    this.owner = owner;
  }

  transaction getColor() returns string { return color; }
  transaction getMake() returns string { return make; }
  transaction getModel() returns string { return model; }
  transaction getOwner() returns string { return owner; }

  transaction toString() returns string {
    return "{color='" + color + "',make='" + make + "',model='" + model + "',owner='" + owner + "'}";
  }
}

main asset contract FabCar {
  // Map from car IDs to cars 
  Dict[Integer, Car]@Owned cars;

  FabCar@Owned() {     
    // Add some sample data
    Car tomoko = new Car("blue", "toyota", "prius", "tomoko");
    Car brad = new Car("red", "ford", "mustang", "brad");
    Car jinsoo = new Car("green", "hyundai", "tucson", "jinsoo");

    cars = new Dict[Integer, Car@Owned](new IntegerComparator());
    insertCar(0, tomoko);
    insertCar(1, brad);
    insertCar(2, jinsoo);
  }

  private transaction insertCar(int id, Car car) {
    cars.insert(new Integer(id), car);
  }

  transaction queryAllCars() returns string {
    CarListPrinter printer = new CarListPrinter();
    cars.iterate(printer);
    return printer.finalize();
  }

  transaction queryCar(int id) returns string {
    Option[Car] maybeCar = cars.peek(new Integer(id));

    switch maybeCar {
      case Some {
        return maybeCar.unpack().toString();
      }
      case None {
        revert("No such car");
      }
    }
  }

  transaction addCar(int id, string color, string make, string model, string owner) {
    Integer key = new Integer(id);
    Car car = new Car(color, make, model, owner);

    Option[Car@Unowned] prevCar = cars.peek(key);
    switch prevCar {
      case Some {
        disown prevCar;
        revert("Car with that ID already exists");
      }
      case None {
        disown prevCar;
        cars.insert(key, car);
      }
    }
  }
}
