/* Build the generated code into a jar file. */

apply plugin: 'java'
apply plugin: 'application'

if (project.hasProperty("main")) {
    mainClassName="edu.cmu.cs.obsidian.generated_code.$main"
}

// TODO: generate this gradle file so we don't have to pass in main class on command line
archivesBaseName='chaincode'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

sourceSets {
    main {
        java {
            srcDirs = ["$codeDirectory", '../Obsidian Runtime/src/Runtime/']
            exclude '**/*Mock*.java'
        }
    }
}

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

dependencies {
    compile group: 'org.hyperledger.fabric-sdk-java', name: 'fabric-sdk-java', version: '1.1.0'
    // below here stolen from chaincode
    compile 'io.grpc:grpc-all:0.13.2'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'org.hyperledger:shim-client:1.0'
    compile 'org.glassfish:javax.json:1.1.0-M1'
    compile 'org.json:json:20171018'
    compile 'com.google.protobuf:protobuf-java:3.5.1'
}


version = '1.0'
libsDirName = '../../build'
jar {
    archiveName = 'client.jar'
    manifest {
        attributes 'Implementation-Title': 'Generated code',
                   'Implementation-Version': version,
                   'Class-Path': configurations.compile.collect { it.getName() } .join(' ') + " .",
                   'Main-Class': "edu.cmu.cs.obsidian.generated_code.$main"
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from {
        file("../Obsidian Runtime/log4j.xml")
    }
}
