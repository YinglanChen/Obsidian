contract PharmacyPrescriptionRecordList {
    state Nil;
    asset state Cons {
        int ID;
        PharmacyPrescriptionRecord@Owned record;
        PharmacyPrescriptionRecordList@Shared next;
    }

    PharmacyPrescriptionRecordList@Shared() {
        ->Nil;
    }

    PharmacyPrescriptionRecordList@Shared(int id, 
                                        PharmacyPrescriptionRecord@Owned >> Unowned r, 
                                        PharmacyPrescriptionRecordList@Shared n) {
        ->Cons(ID = id, record = r, next = n);
    }

    transaction removeRecord(PharmacyPrescriptionRecordList@Shared this, int id) returns PharmacyPrescriptionRecord@Owned {
        if (this in Cons) {
            if (ID == id) {
                PharmacyPrescriptionRecord oldRecord = record;

                if (next in Nil) {
                    ->Nil;
                } else {
                    PharmacyPrescriptionRecordList newNext = next.getNext();
                    ->Cons(record = next.getRecord(), next = newNext);
                }

                return oldRecord;
            } else {
                return next.removeRecord(id);
            }
        } else {
            revert "Can't find record with given ID to remove.";
        }
    }

    transaction getRecord(PharmacyPrescriptionRecordList@Cons >> Nil this) returns PharmacyPrescriptionRecord@Owned {
        PharmacyPrescriptionRecord res = record;
        ->Nil;
        return res;
    }

    transaction getNext(PharmacyPrescriptionRecordList@Cons this) returns PharmacyPrescriptionRecordList@Shared {
        return next;
    }

    transaction put(PharmacyPrescriptionRecordList@Shared this, int id, PharmacyPrescriptionRecord@Owned >> Unowned r) returns PharmacyPrescriptionRecordList@Shared {
        PharmacyPrescriptionRecordList newHead = new PharmacyPrescriptionRecordList(id, r, this);
        return newHead;
    }
}

