/*
 * This system is intended to reflect the following rule on prescriptions:
 *    A prescription cannot be filled more times than the designated number of refills specifies.
 *
 * However, the Drug Enforcement Agency is worried that the code below might allow violations of the rule by
 * malevolent patients, who might modify or subclass the Patient contract.
 * Specifically, it is possible for a caller to call depositPrescription() several times
 * on different Pharmacy objects with the same Prescription object. See getMedicine() below for an example.
 *
 * YOUR TASK: Please use what you have learned today to fix this problem (avoiding runtime checks if possible).
 */

import "Collections.obs"

// Prescriptions are immutable by design; pharmacies that want to record information about
// prescriptions must do so in a separate data structure.
contract Prescription {
    string prescriptionText; // specifies the drug, dosage, etc.
    int refills;
    string patientName; // Assume that patient names are unique.

    Prescription@Owned(string text, int r, string patient) {
        prescriptionText = text;
        refills = r;
        patientName = patient;
    }

    transaction getRefills() returns int {
        return refills;
    }
}

contract PharmacyPrescriptionRecord {
    int fillsLeft;
    Prescription@Shared prescription;

    PharmacyPrescriptionRecord@Owned(int f, Prescription@Shared p) {
        fillsLeft = f;
        prescription = p;
    }

    transaction getFillsLeft(PharmacyPrescriptionRecord@Unowned this) returns int {
        return fillsLeft;
    }

    transaction decrementFillsLeft(PharmacyPrescriptionRecord@Unowned this) {
        fillsLeft = fillsLeft - 1;
    }
}

/* A Pharmacy keeps a record of all the prescriptions that patients have submitted as well as how many times each prescription has been filled.
 * Before filling a prescription, the pharmacy must make sure that there is at least one refill available.
 */
main asset contract Pharmacy {
    PharmacyPrescriptionRecordList@Shared prescriptionRecords;
    int nextID;

    Pharmacy@Owned() {
        nextID = 0;
        prescriptionRecords = new PharmacyPrescriptionRecordList();
    }

	// Must be called before the patient can fill a new prescription.
    // Assumes that the prescription was not already deposited in this Pharmacy.
    // Returns the new ID of the prescription so it can be looked up later.
	transaction depositPrescription(Prescription@Shared prescription) returns int {
        int origFills = prescription.getRefills();
        int thisID = nextID;
        PharmacyPrescriptionRecord newRecord = new PharmacyPrescriptionRecord(origFills, prescription);
        prescriptionRecords = prescriptionRecords.put(thisID, newRecord);
        nextID = nextID + 1;
        return thisID;
	}

	transaction fillPrescription(int prescriptionID) {
        PharmacyPrescriptionRecord record = prescriptionRecords.removeRecord(prescriptionID);
        if (record.getFillsLeft() > 0) {
            record.decrementFillsLeft();
            prescriptionRecords.put(prescriptionID, record);
            requestFillFromPharmacist(prescriptionID);
        }
	}

	transaction requestFillFromPharmacist(int prescriptionID) {
		// This code, which is not shown, notifies the pharmacist to actually fill the prescription.
	}
}

contract Patient {
    transaction getMedicine(Pharmacy@Shared pharmacy1, Pharmacy@Shared pharmacy2, Prescription@Shared prescription) {
        int prescriptionID1 = pharmacy1.depositPrescription(prescription);
        pharmacy1.fillPrescription(prescriptionID1);
        
        // Uh oh: the patient should not be able to deposit the prescription 
        // a second time, obtaining more refills than authorized!
        int prescriptionID2 = pharmacy2.depositPrescription(prescription);
        pharmacy2.fillPrescription(prescriptionID2);
    }
}