
//Represents the money being traded in this program
asset contract Money {
    int amount; //Amount that this Money object holds

    //Constructor
    Money@Owned(int amt) {
        amount = amt;
    }

    //Add additional Money
    transaction mergeMoney(Money@Owned this, Money@Owned >> Unowned m) {
         amount = amount + m.getAmount();
         disown m;
    }

    //Returns the amount of this Money
    transaction getAmount(Money@Owned this) returns int {
        return amount;
    }

    //Use some amount of this Money
    transaction splitMoney(Money@Owned this, int amt) returns Money@Owned {
        if (amt > amount) {
            revert "Can't split out more money than is available in a given Money object.";
        } else {
            amount = amount - amt;
            return new Money(amt);
        }
    }
}


//Represents the bet prediction of a Bettor
contract BetPrediction {
    string predictedOutcome; //the Bettor's prediction of the winning outcome
    int betAmount; //the amount of money the Bettor put down on this BetPrediction

    //Constructor
    BetPrediction@Owned(string predOut, int amount) {
        predictedOutcome = predOut;
        betAmount = amount;
    }

    //Returns the predicted outcome
    transaction getPredOutcome(BetPrediction@Unowned this) returns string {
        return predictedOutcome;
    }

    //Returns the betAmount
    transaction getBetAmount(BetPrediction@Unowned this) returns int {
        return betAmount;
    }
}


//Represents a person betting on a game
asset contract Bettor {
    Money@Owned money; //Total Money the Bettor owns

    //Constructor
    Bettor@Owned() {
        money = new Money(100);
    }
    
    //Take some Money out of the Bettor's total money
    transaction withdrawMoney(Bettor@Owned this, int amount) returns Money@Owned {
        Money m = money.splitMoney(amount);
        return m;
    }

    //Adds Money to the Bettor's total money
    transaction receiveMoney(Bettor@Unowned this, Money@Owned >> Unowned m) {
        money.mergeMoney(m);
    }
}

//Represents a single bet
contract Bet {
    Bettor@Unowned bettor; //The Bettor making the bet
    BetPrediction@Unowned prediction; //The BetPrediction for the winner

    //Constructor
    Bet@Owned(Bettor@Unowned b, BetPrediction@Unowned p) {
        bettor = b;
        prediction = p;
    }

    //Returns a reference to the Bettor making the bet
    transaction getBettor(Bet@Unowned this) returns Bettor@Unowned {
        return bettor;
    }

    //Returns a reference to the BetPrediction the Bettor made
    transaction getBetPrediction(Bet@Unowned this) returns BetPrediction@Unowned {
        return prediction;
    }
}

//Represents a container of Bets
contract BetList {
    state Empty;
    state HasItems {
        BetList@Shared next;
        Bet@Unowned b;
    }

    //Constructor
    BetList@Shared() {
        ->Empty;
    }

    transaction getNext(BetList@HasItems this) returns BetList@Shared {
        return next;
    }

    transaction getValue(BetList@HasItems this) returns Bet@Unowned {
        return b;
    }

    //Add a new Bet to the end of the list
    transaction append(Bet@Unowned newB) {
        
        if (this in Empty) {
            BetList bList = new BetList();
            -> HasItems(b = newB, next = bList);
        }
        else {
            next.append(newB);
        }
    }

    //remove a Bet with a given Bettor reference, and return that Bet
    transaction popSpecific(Bettor@Unowned bettor) returns Bet@Unowned {
        if (this in HasItems) {
            if (b.getBettor() == bettor) {
                Bet temp = b; 
                if (next in Empty) {                   
                    disown next;
                    ->Empty;
                }
                else {
                    Bet newB = next.getValue();
                    BetList bList = next.getNext();
                    -> HasItems(b = newB, next = bList);
                }
                return temp;
            }
            else {
                return next.popSpecific(bettor);
            }
        }
        else {
            revert("No bets in list");
        }
    }

    //returns true if a Bet has been placed by a Bettor
    transaction contains(Bettor@Unowned bettor) returns bool {
        if (this in HasItems) {
            if (b.getBettor() == bettor) {
                return true;
            }
            else {
                return next.contains(bettor);
            }
        }
        else {
            return false;
        }
    }
}

//Represents a generic game
contract Game {
    state BeforePlay;
    state Playing;
    state FinishedPlaying;

    //Constructor
    Game@BeforePlay() {
        -> BeforePlay;
    }

    //Start the game
    transaction startPlaying(Game@BeforePlay >> Playing this) {
        -> Playing;
    }

    //Finish the game
    transaction finishPlaying(Game@Playing >> FinishedPlaying this) {
        -> FinishedPlaying;
    }

    //Returns the outcome of the game
    transaction calculateOutcome(Game@FinishedPlaying this) returns string {
        //...
        return ""; //Always returns empty string for now
    }
}